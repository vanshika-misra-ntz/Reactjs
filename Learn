Basic of React


How to make a new project through vs code?
Ans->  Building a React-Project-App ---> npx create-react-app my-app

  To start the React-Project-App ---> npm start

 
What are props?
Ans-> props (short for "properties") are a way to pass data from a parent component to a child component. They allow you to make components dynamic and reusable by providing them with different data inputs.


Key Points about Props:
Immutable: Props are read-only in the child component. This means that a component cannot modify the props it receives; they are immutable.

Passed from Parent to Child: The parent component passes props to its children.

Used to Make Components Reusable: By passing different props, you can reuse the same component in different ways. For instance, the same Child component can display different names based on the prop it receives.

Props as Function Parameters: In functional components, props are passed as an argument to the component function:


Prop Types: You can define the expected types for props using the prop-types package, which helps ensure that the correct type of data is passed to components.

For example:-

function Parent() {
  return <Child name="John" />;
}

function Child(props) {
  return <h1>Hello, {props.name}!</h1>;
}

USE EFFECT
useEffect is a powerful hook that allows you to perform side effects in functional components.
Side effects include tasks like fetching data from an API, subscribing to a service, manipulating the DOM, or running a function when a component mounts, updates, or unmounts.


import React, { useState, useEffect } from 'react';

function FetchData() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Fetch data from API when component mounts
    fetch("https://api.example.com/data")
      .then((response) => response.json())
      .then((data) => setData(data));

    // Cleanup function if needed (e.g., abort fetch)
    return () => {
      console.log("Component unmounted");
    };
  }, []);  // Empty array means it runs once after the initial render

  return <div>Data: {data ? JSON.stringify(data) : "Loading..."}</div>;
}
useEffect is a hook that allows you to run side effects in functional components.
You can control when the effect runs by providing a dependency array.
It can also handle cleanup to prevent memory leaks when the component unmounts or updates.
